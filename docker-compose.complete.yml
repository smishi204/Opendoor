# Complete Docker Compose for Opendoor MCP Server
# This configuration deploys the entire MCP server with all services and capabilities

version: '3.8'

services:
  # Complete Opendoor MCP Server with all tools and services
  opendoor-mcp:
    image: ghcr.io/openhands-mentat-cli/opendoor-opendoor-mcp:latest
    container_name: opendoor-mcp-complete
    restart: unless-stopped
    ports:
      - "3000:3000"    # MCP Server API
      - "3001:3001"    # Web Interface
      - "6379:6379"    # Redis (for external access if needed)
    environment:
      # Core MCP Server Configuration
      - NODE_ENV=production
      - MCP_TRANSPORT=sse
      - HOST=0.0.0.0
      - PORT=3000
      - WEB_PORT=3001
      
      # Redis Configuration
      - REDIS_URL=redis://localhost:6379
      - REDIS_HOST=localhost
      - REDIS_PORT=6379
      
      # Logging and Monitoring
      - LOG_LEVEL=info
      - HEALTH_CHECK_INTERVAL=30
      
      # Session Management
      - SESSION_TIMEOUT=3600
      - MAX_SESSIONS=10
      - CONTAINER_TIMEOUT=1800
      
      # Security Settings
      - SECURITY_ENABLED=true
      - RATE_LIMIT_ENABLED=true
      - ALLOWED_ORIGINS=*
      - CORS_ENABLED=true
      - HELMET_ENABLED=true
      
      # Docker Integration
      - DOCKER_HOST=unix:///var/run/docker.sock
      
      # MCP Features
      - MCP_SERVER_NAME=Opendoor MCP Server Complete
      - MCP_SERVER_VERSION=2.0.0
      - MCP_TOOLS_ENABLED=execute_code,create_vscode_session,create_playwright_session,manage_sessions,system_health
      - MCP_RESOURCES_ENABLED=system_config,usage_guide
      - MCP_PROMPTS_ENABLED=usage_guide
      
      # Performance Settings
      - NODE_OPTIONS=--max-old-space-size=2048
      - UV_THREADPOOL_SIZE=4
      
    volumes:
      # Docker socket for container management
      - /var/run/docker.sock:/var/run/docker.sock:ro
      
      # Persistent data directories
      - opendoor_sessions:/app/sessions
      - opendoor_logs:/app/logs
      - opendoor_temp:/app/temp
      - opendoor_cache:/tmp/mcp-cache
      
      # Optional: Mount host directories for development
      # - ./workspace:/home/nodejs/workspace
      # - ./custom-containers:/app/containers/custom
      
    networks:
      - opendoor-network
      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 90s
      
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
          
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.opendoor-mcp.rule=Host(`mcp.localhost`)"
      - "traefik.http.routers.opendoor-mcp.entrypoints=web"
      - "traefik.http.services.opendoor-mcp.loadbalancer.server.port=3000"
      - "traefik.http.routers.opendoor-web.rule=Host(`mcp-web.localhost`)"
      - "traefik.http.routers.opendoor-web.entrypoints=web"
      - "traefik.http.services.opendoor-web.loadbalancer.server.port=3001"

  # Optional: Reverse Proxy (Nginx)
  nginx:
    image: nginx:alpine
    container_name: opendoor-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - opendoor-mcp
    networks:
      - opendoor-network
    profiles:
      - nginx

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: opendoor-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - opendoor-network
    profiles:
      - monitoring

  # Optional: Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: opendoor-grafana
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - opendoor-network
    profiles:
      - monitoring

  # Optional: Log aggregation with Loki
  loki:
    image: grafana/loki:latest
    container_name: opendoor-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - opendoor-network
    profiles:
      - monitoring

  # Optional: Log shipping with Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: opendoor-promtail
    restart: unless-stopped
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - opendoor-network
    profiles:
      - monitoring

networks:
  opendoor-network:
    driver: bridge
    name: opendoor-network

volumes:
  # Persistent storage for MCP server
  opendoor_sessions:
    name: opendoor_sessions
  opendoor_logs:
    name: opendoor_logs
  opendoor_temp:
    name: opendoor_temp
  opendoor_cache:
    name: opendoor_cache
    
  # Monitoring storage
  prometheus_data:
    name: opendoor_prometheus_data
  grafana_data:
    name: opendoor_grafana_data
  loki_data:
    name: opendoor_loki_data